// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type bpfConnectionEventT struct {
	_    structs.HostLayout
	Fd   uint32
	Ip   uint32
	Port uint16
	_    [2]byte
}

type bpfQueryStackT struct {
	_     structs.HostLayout
	Stack [32]uint64
	Top   uint64
}

type bpfSockKey struct {
	_   structs.HostLayout
	Pid uint32
	Fd  int32
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	HandleClose        *ebpf.ProgramSpec `ebpf:"handle_close"`
	HandleConnect      *ebpf.ProgramSpec `ebpf:"handle_connect"`
	HandleExitRecvfrom *ebpf.ProgramSpec `ebpf:"handle_exit_recvfrom"`
	HandleRecvfrom     *ebpf.ProgramSpec `ebpf:"handle_recvfrom"`
	HandleSendto       *ebpf.ProgramSpec `ebpf:"handle_sendto"`
	SslRead            *ebpf.ProgramSpec `ebpf:"ssl_read"`
	SslRetRead         *ebpf.ProgramSpec `ebpf:"ssl_ret_read"`
	SslWrite           *ebpf.ProgramSpec `ebpf:"ssl_write"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	ActiveReads     *ebpf.MapSpec `ebpf:"active_reads"`
	Connections     *ebpf.MapSpec `ebpf:"connections"`
	PostgresQueries *ebpf.MapSpec `ebpf:"postgres_queries"`
	QueryTimings    *ebpf.MapSpec `ebpf:"query_timings"`
	SqliteQueries   *ebpf.MapSpec `ebpf:"sqlite_queries"`
	Timing          *ebpf.MapSpec `ebpf:"timing"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	ActiveReads     *ebpf.Map `ebpf:"active_reads"`
	Connections     *ebpf.Map `ebpf:"connections"`
	PostgresQueries *ebpf.Map `ebpf:"postgres_queries"`
	QueryTimings    *ebpf.Map `ebpf:"query_timings"`
	SqliteQueries   *ebpf.Map `ebpf:"sqlite_queries"`
	Timing          *ebpf.Map `ebpf:"timing"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.ActiveReads,
		m.Connections,
		m.PostgresQueries,
		m.QueryTimings,
		m.SqliteQueries,
		m.Timing,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	HandleClose        *ebpf.Program `ebpf:"handle_close"`
	HandleConnect      *ebpf.Program `ebpf:"handle_connect"`
	HandleExitRecvfrom *ebpf.Program `ebpf:"handle_exit_recvfrom"`
	HandleRecvfrom     *ebpf.Program `ebpf:"handle_recvfrom"`
	HandleSendto       *ebpf.Program `ebpf:"handle_sendto"`
	SslRead            *ebpf.Program `ebpf:"ssl_read"`
	SslRetRead         *ebpf.Program `ebpf:"ssl_ret_read"`
	SslWrite           *ebpf.Program `ebpf:"ssl_write"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.HandleClose,
		p.HandleConnect,
		p.HandleExitRecvfrom,
		p.HandleRecvfrom,
		p.HandleSendto,
		p.SslRead,
		p.SslRetRead,
		p.SslWrite,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
